@page "/chat/{RoomId}"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Threading.Channels
@using iChat.Client.Services.UserServices.Chat
@using iChat.DTOs.Users.Messages
@inject ChatClientService ChatService
@inject UserStateService _userInfo
@inject IJSRuntime JS
@implements IDisposable
@implements IAsyncDisposable
<div class="special-action-panel">
    <button class="special-action-button"
            @onclick="TriggerSpecialRequest"
            disabled="@(_isLoading || _isPermanentlyDisabled)">
        @if (_isLoading)
        {
            <span class="spinner"></span> 
        }
        else
        {
            <span>Special</span>
        }
    </button>
</div>
<div class="chat-container" @onclick="HideContextMenu" @onkeydown="HandleEscapeKey">
    <div class="chat-header">
        <h3>Chat Room @RoomId</h3>
        <div class="connection-status">
            <span class="@_connectionStatusClass">@_connectionStatus</span>
        </div>
    </div>

    <div class="messages-container" @ref="_messagesContainer"
         style="overflow-y: scroll; height: calc(100vh - 150px);">
        @foreach (var message in _messages.Values.Where(m => MessageRenderer.ShouldShowMessage(m)))
        {
            var renderedMessage = MessageRenderer.RenderMessage(message, _currentUserId);

            <div class="@renderedMessage.CssClass"
                 id="message-@message.Id"
                 @oncontextmenu="(e => ShowContextMenu(e, message.Id))"
                 @oncontextmenu:preventDefault
                 @key="message.Id">
                @if (!string.IsNullOrEmpty(renderedMessage.Icon))
                {
                    <span class="message-icon">@renderedMessage.Icon</span>
                }

                <div class="message-content">@renderedMessage.Content</div>

                @if (renderedMessage.ShowTimestamp)
                {
                    <div class="message-time">@message.CreatedAt.LocalDateTime.ToString("g")</div>
                }
            </div>
        }
    </div>

    @if (_showContextMenu)
    {
        <div class="context-menu" style="@_contextMenuStyle" @onclick:stopPropagation="true">
            <div class="context-item" @onclick="CopyMessageId">Copy Message ID</div>
            <div class="context-item" @onclick="ScrollToContextMessage">Scroll to Message</div>
        </div>
    }

    <div class="message-input">
        <input type="text" @bind="_newMessage" @bind:event="oninput"
               placeholder="Type your message..." @onkeypress="HandleKeyPress" />
        <button @onclick="SendMessage" disabled="@string.IsNullOrEmpty(_newMessage)">Send</button>
    </div>
</div>

@code {
    [Parameter] public string RoomId { get; set; } = string.Empty;

    private string? _currentRoomId;
    private SortedList<long, ChatMessageDtoSafe> _messages = new();
    private string _newMessage = string.Empty;
    private ElementReference _messagesContainer;
    private string _connectionStatus = "Disconnected";
    private string _connectionStatusClass = "disconnected";
    private string _currentUserId = "";
    private bool _shouldScrollToBottom = false;
    private readonly Channel<ChatMessageDtoSafe> _sendQueue = Channel.CreateUnbounded<ChatMessageDtoSafe>();
    private Task? _sendQueueTask;

    // Context menu state
    private bool _showContextMenu = false;
    private string _contextMenuStyle = "";
    private string _contextMenuMessageId;

    //loading button state
    private bool _isLoading = false;
    private bool _isPermanentlyDisabled = false;

    private async Task TriggerSpecialRequest()
    {
        if (_isLoading || _isPermanentlyDisabled)
            return;

        _isLoading = true;
        try
        {
            await Task.Delay(1500);
            Console.WriteLine("Special request completed.");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Special request failed: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void DisableSpecialButtonPermanently()
    {
        _isPermanentlyDisabled = true;
    }



    protected override async Task OnInitializedAsync()
    {
        _sendQueueTask = ProcessSendQueueAsync();
        _currentUserId = _userInfo.GetUserId().ToString();
        ChatService.OnMessageReceived += HandleNewMessage;

        try
        {
            await ChatService.ConnectAsync();
            _connectionStatus = "Connected";
            _connectionStatusClass = "connected";
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error connecting to chat: {ex.Message}");
            _connectionStatus = "Connection Failed";
            _connectionStatusClass = "disconnected";
        }

        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_currentRoomId != RoomId)
        {
            if (!string.IsNullOrEmpty(_currentRoomId))
                await ChatService.LeaveRoomAsync(_currentRoomId);

            _currentRoomId = RoomId;
            _messages.Clear();
            _shouldScrollToBottom = true;

            if (!string.IsNullOrEmpty(RoomId))
                await ChatService.JoinRoomAsync(RoomId);

            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldScrollToBottom)
        {
            await ScrollToBottom();
            _shouldScrollToBottom = false;
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(1);
            await JS.InvokeVoidAsync("scrollToBottom", _messagesContainer);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error scrolling to bottom: {ex.Message}");
        }
    }

    private async Task HandleNewMessage(ChatMessageDtoSafe message)
    {
        try
        {
            if (message.ChannelId == RoomId)
            {
                var messageId = long.Parse(message.Id);

                if (!_messages.ContainsKey(messageId))
                {
                    _messages.Add(messageId, message);
                    _shouldScrollToBottom = true;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error handling new message: {ex.Message}");
        }
    }

    private async Task ProcessSendQueueAsync()
    {
        await foreach (var message in _sendQueue.Reader.ReadAllAsync())
        {
            try
            {
                await ChatService.SendMessageAsync(RoomId, message);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Failed to send message: {ex.Message}");
            }
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessage)) return;

        var messageContent = _newMessage.Trim();
        _newMessage = string.Empty;
        StateHasChanged();

        var message = new ChatMessageDtoSafe
        {
            Content = messageContent,
            MessageType = 1,
            ChannelId = RoomId,
            SenderId = _currentUserId,
            CreatedAt = DateTimeOffset.UtcNow
        };

        await _sendQueue.Writer.WriteAsync(message);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await DisposeCore();
        GC.SuppressFinalize(this);
    }

    public void Dispose()
    {
        DisposeCore().AsTask().Wait();
        GC.SuppressFinalize(this);
    }

    private async ValueTask DisposeCore()
    {
        ChatService.OnMessageReceived -= HandleNewMessage;

        if (!string.IsNullOrEmpty(_currentRoomId))
        {
            try
            {
                await ChatService.LeaveRoomAsync(_currentRoomId);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error leaving room on dispose: {ex.Message}");
            }
        }

        _sendQueue.Writer.Complete();
        if (_sendQueueTask != null)
        {
            await _sendQueueTask;
        }
    }

    private void ShowContextMenu(MouseEventArgs e, string messageId)
    {
        _contextMenuMessageId = messageId;
        _contextMenuStyle = $"top: {e.ClientY}px; left: {e.ClientX}px;";
        _showContextMenu = true;
    }

    private void HideContextMenu()
    {
        _showContextMenu = false;
    }

    private void HandleEscapeKey(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
            _showContextMenu = false;
    }

    private async Task CopyMessageId()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", _contextMenuMessageId);
        _showContextMenu = false;
    }

    private async Task ScrollToContextMessage()
    {
        await JS.InvokeVoidAsync("scrollToMessage", _contextMenuMessageId);
        _showContextMenu = false;
    }
}
