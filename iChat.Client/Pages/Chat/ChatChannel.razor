@page "/chat/{RoomId}"
@using System.Text.Json
@using System.Text.Json.Serialization
@using iChat.Client.Services.UserServices.ChatService
@using iChat.DTOs.Users.Messages
@inject SignalRWorkerService SignalRService
@inject UserStateService _userInfo
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="chat-container">
    <div class="chat-header">
        <h3>Chat Room @RoomId</h3>
        <div class="connection-status">
            <span class="@_connectionStatusClass">@_connectionStatus</span>
        </div>
    </div>

    <div class="messages-container" @ref="_messagesContainer" @onscroll="HandleScroll">
        <div class="loading-indicator" style="display: @(_isLoadingHistory ? "block" : "none")">
            Loading older messages...
        </div>
        
        @foreach (var message in _messages)
        {
            <div class="message @(message.SenderId == _currentUserId ? "sent" : "received")" @key="message.Id">
                <div class="message-content">@message.Content</div>
                <div class="message-time">@message.CreatedAt.LocalDateTime.ToString("g")</div>
            </div>
        }
    </div>

    <div class="message-input">
        <input type="text" @bind="_newMessage" @bind:event="oninput"
               placeholder="Type your message..." @onkeypress="HandleKeyPress" />
        <button @onclick="SendMessage" disabled="@string.IsNullOrEmpty(_newMessage)">Send</button>
    </div>
</div>
@code {
    [Parameter] public string RoomId { get; set; }

    private List<ChatMessageDto> _messages = new();
    private string _newMessage = string.Empty;
    private ElementReference _messagesContainer;
    private string _connectionStatus = "Disconnected";
    private string _connectionStatusClass = "disconnected";
    private long _currentUserId = 1;
    private bool _isLoadingHistory = false;
    private bool _hasMoreHistory = true;
    private long? _oldestMessageId = null;
    private bool _isFirstLoad = true;
    private bool _shouldScrollToBottom = false;
    private DotNetObjectReference<ChatChannel>? _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        _dotNetRef = DotNetObjectReference.Create(this);
        _currentUserId = _userInfo.GetUserId();

        // Initialize SignalR
        SignalRService.OnMessageReceived += HandleNewMessage;
        SignalRService.OnConnected += UpdateConnectedStatus;
        SignalRService.OnDisconnected += UpdateDisconnectedStatus;
        SignalRService.OnReconnecting += UpdateReconnectingStatus;
        SignalRService.OnReconnected += UpdateReconnectedStatus;

        try
        {
            await SignalRService.InitializeAsync();
            await SignalRService.JoinRoomAsync(RoomId);

            // Load initial messages
            await LoadMessages();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error initializing SignalR: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("signalRInterop.setupInfiniteScroll", _messagesContainer, _dotNetRef);
        }

        if (_shouldScrollToBottom)
        {
            await ScrollToBottom();
            _shouldScrollToBottom = false;
        }
    }

    private async Task LoadMessages(bool loadOlder = false)
    {
        if (_isLoadingHistory) return;

        _isLoadingHistory = true;
        StateHasChanged();

        try
        {
            if (loadOlder && _oldestMessageId.HasValue)
            {
                // Load older messages from server via SharedWorker
                var olderMessages = await SignalRService.GetMessageHistoryAsync(RoomId, _oldestMessageId.Value);

                if (olderMessages.Count == 0)
                {
                    _hasMoreHistory = false;
                    return;
                }

                _messages.InsertRange(0, olderMessages);
                _oldestMessageId = olderMessages.First().Id;
            }
            else if (!loadOlder)
            {
                // Initial load - get all messages from server via SharedWorker
                var initialMessages = await SignalRService.GetMessageHistoryAsync(RoomId);
                _messages = initialMessages;

                if (_messages.Count > 0)
                {
                    _oldestMessageId = _messages.First().Id;
                    _shouldScrollToBottom = true;
                }
            }
        }
        finally
        {
            _isLoadingHistory = false;
            _isFirstLoad = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task LoadMoreMessages()
    {
        if (!_isLoadingHistory && _hasMoreHistory)
        {
            await LoadMessages(loadOlder: true);
        }
    }

    private async Task HandleScroll()
    {
        var scrollInfo = await JSRuntime.InvokeAsync<ScrollInfo>("signalRInterop.getScrollInfo", _messagesContainer);

        if (scrollInfo.IsNearTop && !_isLoadingHistory && _hasMoreHistory)
        {
            await LoadMessages(loadOlder: true);
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("signalRInterop.scrollToBottom", _messagesContainer);
    }

    private void HandleNewMessage(string messageJson)
    {
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                NumberHandling = JsonNumberHandling.AllowReadingFromString
            };

        var message = JsonSerializer.Deserialize<ChatMessageDto>(messageJson, options);

        if (message != null && message.RoomId.ToString() == RoomId)
        {
            _messages.Add(message);

            if (!_isFirstLoad)
            {
                _shouldScrollToBottom = true;
            }

            StateHasChanged();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessage)) return;

        var message = new ChatMessageDto
            {
                Content = _newMessage,
                MessageType = 1,
                RoomId = long.Parse(RoomId),
                SenderId = _currentUserId
            };

        try
        {
            await SignalRService.SendMessageAsync(RoomId, message);
            _newMessage = string.Empty;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error sending message: {ex.Message}");
        }
    }


    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private void UpdateConnectedStatus()
    {
        _connectionStatus = "Connected";
        _connectionStatusClass = "connected";
        StateHasChanged();
    }

    private void UpdateDisconnectedStatus()
    {
        _connectionStatus = "Disconnected";
        _connectionStatusClass = "disconnected";
        StateHasChanged();
    }

    private void UpdateReconnectingStatus()
    {
        _connectionStatus = "Reconnecting...";
        _connectionStatusClass = "reconnecting";
        StateHasChanged();
    }

    private void UpdateReconnectedStatus()
    {
        _connectionStatus = "Connected";
        _connectionStatusClass = "connected";
        StateHasChanged();
    }

    public void Dispose()
    {
        SignalRService.OnMessageReceived -= HandleNewMessage;
        SignalRService.OnConnected -= UpdateConnectedStatus;
        SignalRService.OnDisconnected -= UpdateDisconnectedStatus;
        SignalRService.OnReconnecting -= UpdateReconnectingStatus;
        SignalRService.OnReconnected -= UpdateReconnectedStatus;

        _ = SignalRService.LeaveRoomAsync(RoomId);
        _dotNetRef?.Dispose();
    }
    public class ScrollInfo
    {
        public double ScrollTop { get; set; }
        public double ScrollHeight { get; set; }
        public double ClientHeight { get; set; }
        public bool IsNearTop => ScrollTop < 100;
    }
}


<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        max-width: 800px;
        margin: 0 auto;
        border: 1px solid #ddd;
    }

    .chat-header {
        padding: 10px;
        background-color: #f5f5f5;
        border-bottom: 1px solid #ddd;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .messages-container {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .message {
        margin: 5px 0;
        padding: 8px 12px;
        border-radius: 15px;
        max-width: 70%;
    }

    .message.sent {
        background-color: #007bff;
        color: white;
        margin-left: auto;
    }

    .message.received {
        background-color: #e9ecef;
        margin-right: auto;
    }

    .message-time {
        font-size: 0.8em;
        opacity: 0.7;
        text-align: right;
    }

    .message-input {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
    }

    .message-input input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-right: 8px;
    }

    .connection-status span {
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.9em;
    }

    .connected {
        background-color: #d4edda;
        color: #155724;
    }

    .disconnected {
        background-color: #f8d7da;
        color: #721c24;
    }

    .reconnecting {
        background-color: #fff3cd;
        color: #856404;
    }
</style>