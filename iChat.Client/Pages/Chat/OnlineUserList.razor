@using iChat.Client.Services.UserServices.Chat
@inject UserMetadataService _userMetadataService
<div class="online-list">
    
    <ul>
        @if (OnlineUsers.Any())
        {
            <li class="section-header">--- Online ---</li>
            @foreach (var userId in OnlineUsers)
            {
                var userMeta = _userMetadataService.GetUserByIdAsync(userId);
                <li class="user-entry online">
                    <div class="message">
                        <img class="avatar" src="@userMeta.AvatarUrl" alt="avatar" />
                        <div>
                            <div class="chat-message-meta">
                                <span class="username">@userMeta.DisplayName</span>
                            </div>
                            <div class="message-content placeholder">This user is currently offline</div>
                        </div>
                    </div>
                </li>
            }
        }

        @if (OfflineUsers.Any())
        {
            <li class="section-header">--- Offline ---</li>
            @foreach (var userId in OfflineUsers)
            {
                var userMeta = _userMetadataService.GetUserByIdAsync(userId);
                <li class="user-entry offline">
                    <div class="message">
                        <img class="avatar" src="@userMeta.AvatarUrl" alt="avatar" />
                        <div>
                            <div class="chat-message-meta">
                                <span class="username">@userMeta.DisplayName</span>
                            </div>
                            <div class="message-content placeholder">This user is currently offline</div>
                        </div>
                    </div>
                </li>
            }
        }


    </ul>
</div>

@code {
    private List<long> OnlineUsers { get; set; } = new();
    private List<long> OfflineUsers { get; set; } = new();

    private readonly object _lock = new();
    public void LoadUsers(IEnumerable<long> onlineUsers, IEnumerable<long> offlineUsers)
    {
        lock (_lock)
        {
            OnlineUsers = onlineUsers.Distinct().OrderBy(x => x).ToList();
            OfflineUsers = offlineUsers.Distinct().Where(id => !OnlineUsers.Contains(id)).OrderBy(x => x).ToList();
        }
        InvokeAsync(StateHasChanged);

    }
    public void StateChanged()
    {
        InvokeAsync(StateHasChanged);
    }
    public void SetUserOnline(long userId)
    {
        lock (_lock)
        {
            if (!OnlineUsers.Contains(userId))
            {
                OnlineUsers.Add(userId);
                OnlineUsers = OnlineUsers.Distinct().OrderBy(x => x).ToList();
                OfflineUsers.Remove(userId);
            }
        }
        InvokeAsync(StateHasChanged);
    }
    public void SetUserOffline(long userId)
    {
        lock (_lock)
        {
            if (!OfflineUsers.Contains(userId))
            {
                OfflineUsers.Add(userId);
                OfflineUsers = OfflineUsers.Distinct().OrderBy(x => x).ToList();
                OnlineUsers.Remove(userId);
            }
        }

        InvokeAsync(StateHasChanged);
    }
}
