@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JS
@page "/chatinput_test"

<div class="chat-input-container">
    <div class="chat-input"
         contenteditable="true"
         @ref="_editor"
         @oninput="OnInputAsync"
         @onkeydown="HandleKeyDownAsync"
         placeholder="Message #general...">
    </div>

    @if (_showSuggestions && _suggestions.Count != 0)
    {
        <div class="suggestions">
            @foreach (var emoji in _suggestions)
            {
                <div class="suggestion-item @(emoji.Key == _selectedEmoji?.Key ? "active" : "")"
                     @onclick="() => SelectEmojiAsync(emoji)">
                    @if (emoji.IsCustom)
                    {
                        <img src="@emoji.Value" class="emoji-icon" alt="@emoji.Key emoji" />
                        <span class="emoji-name">:@emoji.Key:</span>
                    }
                    else
                    {
                        <span class="emoji">@emoji.Value</span>
                        <span class="emoji-name">:@emoji.Key:</span>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private ElementReference _editor;
    private bool _showSuggestions;
    private string _currentWord = string.Empty;

    private readonly List<EmojiItem> _emojiMap =
    [
        new("smile", "😄"),
        new("sad", "😢"),
        new("party", "🎉"),
        new("fire", "🔥"),
        new("cat", "/images/emojis/cat.png", true),
        new("doggo", "/images/emojis/dog.png", true)
    ];

    private List<EmojiItem> _suggestions = [];
    private EmojiItem? _selectedEmoji;

    private async Task OnInputAsync(EventArgs _)
    {
        var info = await JS.InvokeAsync<CaretEmojiInfo?>("getEmojiTokenAtCaret", _editor);

        if (info is null)
        {
            _showSuggestions = false;
            _suggestions.Clear();
            StateHasChanged();
            return;
        }

        _currentWord = info.Word;

        if (!info.HasClosing)
        {
            _suggestions = _emojiMap
                .Where(x => x.Key.StartsWith(_currentWord, StringComparison.OrdinalIgnoreCase))
                .ToList();

            _showSuggestions = _suggestions.Count != 0;
            _selectedEmoji = _suggestions.FirstOrDefault();
        }
        else
        {
            var match = _emojiMap.FirstOrDefault(x =>
                x.Key.Equals(_currentWord, StringComparison.OrdinalIgnoreCase));

            if (match is not null)
                await ReplaceWithEmojiAsync(match, _currentWord);

            _showSuggestions = false;
            _suggestions.Clear();
        }

        StateHasChanged();
    }

    private async Task HandleKeyDownAsync(KeyboardEventArgs e)
    {
        if (!_showSuggestions) return;

        switch (e.Key)
        {
            case "Tab" when _selectedEmoji is not null:
                await SelectEmojiAsync(_selectedEmoji);
                break;
            case "ArrowDown":
                MoveSelection(1);
                break;
            case "ArrowUp":
                MoveSelection(-1);
                break;
            case "Escape":
                _showSuggestions = false;
                _suggestions.Clear();
                StateHasChanged();
                break;
        }
    }

    private async Task SelectEmojiAsync(EmojiItem emoji)
    {
        await ReplaceWithEmojiAsync(emoji, _currentWord);
        _showSuggestions = false;
        _suggestions.Clear();
        _currentWord = string.Empty;
        StateHasChanged();
    }

    private async Task ReplaceWithEmojiAsync(EmojiItem emoji, string word)
    {
        await JS.InvokeVoidAsync("replaceEmojiAtCaret", _editor, word, emoji.IsCustom, emoji.Value);
    }

    private void MoveSelection(int step)
    {
        if (_suggestions.Count == 0) return;
        var currentIndex = _selectedEmoji is not null ? _suggestions.IndexOf(_selectedEmoji) : 0;
        var newIndex = (currentIndex + step + _suggestions.Count) % _suggestions.Count;
        _selectedEmoji = _suggestions[newIndex];
        StateHasChanged();
    }

    private ValueTask<string> GetEditorTextAsync() =>
        JS.InvokeAsync<string>("getEditorPlainText", _editor);

    private sealed record EmojiItem(string Key, string Value, bool IsCustom = false);
    private sealed record CaretEmojiInfo(string Word, bool HasClosing);
}

