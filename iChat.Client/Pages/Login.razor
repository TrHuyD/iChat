@attribute [AllowAnonymousAttribute]
@page "/login"
@using System.Text.Json
@using iChat.DTOs.Users.Auth
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@layout BaseLayout

<h3>Login</h3>

<EditForm Model="login" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" @bind-Value="login.Username" class="form-control" />
        <ValidationMessage For="@(() => login.Username)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" @bind-Value="login.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => login.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<p class="mt-3">
    Don't have an account?
    <NavLink href="/register">Register here</NavLink>
</p>

@code {
    private LoginRequest login = new();

    private async Task HandleLogin()
    {
#if DEBUG
        var url = "https://localhost:6051/api/Auth/login";
        var loginJson = System.Text.Json.JsonSerializer.Serialize(login);

    var jsResponse = await JS.InvokeAsync<JsFetchResponse>(
        "fetchWithCredentials",
        url,
        new
        {
            method = "POST",
            headers = new Dictionary<string, string> { { "Content-Type", "application/json" } },
            body = loginJson
        });

        if (jsResponse.Ok)
        {
            UserInfoLoader.TriggerReload();
            Nav.NavigateTo("/");
        }
        else if (jsResponse.Status == 401)
        {
            var error = jsResponse.Json as JsonElement?;
            string? message = null;

            if (error.HasValue && error.Value.TryGetProperty("error", out var errorProp))
            {
                message = errorProp.GetString();
            }

            ToastService.ShowToast(message ?? "Invalid credentials.", "danger");
        }
        else if (jsResponse.Status == 400)
        {
            ToastService.ShowToast("Please correct the highlighted fields.", "danger");
        }
        else
        {
            ToastService.ShowToast("An unexpected error occurred.", "danger");
        }
#else
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:6051/api/Auth/login")
        {
            Content = JsonContent.Create(login)
        };
        var response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);

        if (response.IsSuccessStatusCode)
        {
            UserInfoLoader.TriggerReload();
            Nav.NavigateTo("/");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            ToastService.ShowToast(error?.Error ?? "Invalid credentials.", "danger");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            ToastService.ShowToast("Please correct the highlighted fields.", "danger");
        }
        else
        {
            ToastService.ShowToast("An unexpected error occurred.", "danger");
        }
#endif
    }

    public class ErrorResponse
    {
        public string? Error { get; set; }
    }

    public class JsFetchResponse
    {
        public bool Ok { get; set; }
        public int Status { get; set; }
        public object? Json { get; set; }
    }
}
