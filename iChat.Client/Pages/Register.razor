@page "/register"
@using iChat.DTOs.Users.Auth

@inject HttpClient Http
@inject NavigationManager Nav

@layout BaseLayout
<h3>Register</h3>

<EditForm Model="register" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Nick Name</label>
        <InputText id="name" @bind-Value="register.Name" class="form-control" />
        <ValidationMessage For="@(() => register.Name)" />
    </div>

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" @bind-Value="register.UserName" class="form-control" />
        <ValidationMessage For="@(() => register.UserName)" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" @bind-Value="register.Email" class="form-control" />
        <ValidationMessage For="@(() => register.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" @bind-Value="register.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => register.Password)" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="confirmPassword" type="password" class="form-control" />
        @if (!string.IsNullOrEmpty(passwordError))
        {
            <div class="text-danger">@passwordError</div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

<p class="mt-3">
    Already have an account?
    <NavLink href="/login">Login here</NavLink>
</p>

@code {
    private RegisterRequest register = new();
    private string confirmPassword = "";
    private string passwordError = "";

    private async Task HandleRegister()
    {
        if (!ValidatePassword(register.Password))
        {
            passwordError = "Password must contain at least:\n" +
                            "- One uppercase letter\n" +
                            "- One lowercase letter\n" +
                            "- One number\n" +
                            "- One special character\n" +
                            "- Minimum 8 characters";
            return;
        }

        if (register.Password != confirmPassword)
        {
            passwordError = "Passwords do not match.";
            return;
        }

        passwordError = "";

        var response = await Http.PostAsJsonAsync("https://localhost:6051/Auth/register", register);
        var result = await response.Content.ReadFromJsonAsync<OperationResult>();

        if (response.IsSuccessStatusCode && result?.Success == true)
        {
            ToastService.ShowToast("Registration successful!", "success");
            Nav.NavigateTo("/login");
        }
        else
        {
            switch(result?.ErrorCode)
            {
                case "username_exists":
                    ToastService.ShowToast("Username is already taken.", "danger");
                    break;
                case "email_exists":
                    ToastService.ShowToast("Email is already registered.", "danger");
                    break;
                case "invalid_data":
                    ToastService.ShowToast("Invalid data provided.", "danger");
                    break;
                default:
                    ToastService.ShowToast("Registration failed. Please try again.", "danger");
                    break;
            }
        }

    }

    private bool ValidatePassword(string password)
    {
        if (string.IsNullOrEmpty(password)) return false;

        bool hasUpper = password.Any(char.IsUpper);
        bool hasLower = password.Any(char.IsLower);
        bool hasDigit = password.Any(char.IsDigit);
        bool hasSpecial = password.Any(c => "!@#$%^&*()_+-=[]{}|;:',.<>?/`~".Contains(c));
        bool hasMinLength = password.Length >= 8;

        return hasUpper && hasLower && hasDigit && hasSpecial && hasMinLength;
    }

    public class OperationResult
    {
        public bool Success { get; set; }
        public string? ErrorCode { get; set; }
        public string? ErrorMessage { get; set; }
    }
}
