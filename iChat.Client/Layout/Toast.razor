@inject ToastService ToastService

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    @if (!string.IsNullOrEmpty(fullMessage))
    {
        <div class="toast align-items-center text-white bg-@level border-0 show" role="alert">
            <div class="d-flex">
                <div class="toast-body">
                    @fullMessage
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideToast"></button>
            </div>
        </div>
    }
</div>

@code {
    private string? baseMessage="";
    private string? fullMessage="";
    private string level = "info";
    private int countdown = 3;
    private CancellationTokenSource? cts;
    private bool isShowing = false;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private async void ShowToast(string message, string level)
    {
        if (isShowing)
            return;

        this.baseMessage = message;
        this.level = level;
        countdown = 3;
        isShowing = true;

        UpdateFullMessage();
        StateHasChanged();

        cts?.Cancel();
        cts = new CancellationTokenSource();
        var token = cts.Token;

        try
        {
            while (countdown > 0)
            {
                await Task.Delay(1000, token);
                countdown--;
                UpdateFullMessage();
                StateHasChanged();
            }

            HideToast();
        }
        catch (TaskCanceledException)
        {
        }
    }

    private void UpdateFullMessage()
    {
        fullMessage = $"{baseMessage} ({countdown}s)";
    }

    private void HideToast()
    {
        baseMessage = null;
        fullMessage = null;
        isShowing = false;
        cts?.Cancel();
        StateHasChanged();
    }
}
