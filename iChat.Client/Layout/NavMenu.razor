@using iChat.Client.Modals.User
@using iChat.Client.Services.UserServices
@using iChat.Client.Services.UserServices.Chat.Util
@using iChat.Client.Services.UserServices.ChatService
@using iChat.DTOs.Users.Messages
@inject ChatNavigationService ChatNavService
@inject UserStateService LoadingService
@inject NavigationManager Navigation
@inject LastVisitedChannelService ChannelTracker
@implements IDisposable

<div class="discord-nav">
    <!-- Server List (Left Sidebar) -->
    <div class="server-sidebar">
        <!-- Home Button -->
        <div class="server-icon home-icon">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="ClearServerSelection">
                <i class="fas fa-home"></i>
            </NavLink>
        </div>

        <!-- Server List -->
        <div class="server-list">
            @foreach (var server in ChatNavService.ChatServers)
            {
                <div class="server-icon @(_selectedServer?.Id == server.Id ? "active" : "")" @onclick="() => ShowChannelList(server)">
                    <img src="@server.AvatarUrl" alt="@server.Name" />
                </div>
            }
           
        </div>

        <!-- Add Server Button -->
        <div class="server-icon add-server" @onclick="() => showCreateServer = true">
            <i class="fas fa-plus"></i>
        </div>
    </div>

    <!-- Channel List Sidebar - Only show when a server is selected -->
    @if (_selectedServer != null)
    {
        <div class="channel-sidebar">
            <div class="sidebar-header">
                <h3>@_selectedServer.Name</h3>
                <button class="sidebar-toggle" @onclick="ClearServerSelection">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="channel-category">
                <div class="category-header">
                    <span>CHANNELS</span>
                </div>

                <div class="channel-list">
                    @foreach (var channel in _selectedServer.Channels.OrderBy(c => c.Order))
                    {
                        <div class="channel-item" @onclick="() => NavigateToChannel(_selectedServer.Id, channel.Id)">
                            <span class="channel-prefix">#</span>
                            <span class="channel-name">@channel.Name</span>
                        </div>
                    }
                    @if (_selectedServer.isadmin)
                    {
                        <div class="channel-item add-channel" @onclick="() => showCreateChannel = true">
                            <span class="channel-prefix">+</span>
                            <span class="channel-name">Create Channel</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<CreateServerModal IsVisible="@showCreateServer" IsVisibleChanged="@((val) => showCreateServer = val)" />
<CreateChannelModal IsVisible="@showCreateChannel" IsVisibleChanged="@((val) => showCreateChannel = val)" ServerId="@SelectedServerId" />
@code {
    private bool showCreateServer = false;
    private bool showCreateChannel = false;
    private ChatServerDto? _selectedServer;
    private string SelectedServerId => _selectedServer?.Id ?? string.Empty;
    protected override void OnInitialized()
    {
        LoadingService.OnAppReadyStateChanged += StateHasChanged;
        ChatNavService.OnChatServersChanged += StateHasChanged;
    }

    private void ClearServerSelection()
    {
        _selectedServer = null;
        StateHasChanged();
    }

    private async Task ShowChannelList(ChatServerDto server)
    {
        // Always select the server first
        _selectedServer = server;

        // Then navigate to the last visited channel or default channel
        var last = await ChannelTracker.GetLastChannelAsync(server.Id);
        var target = server.Channels.FirstOrDefault(c => c.Id == last) ??
                     server.Channels.OrderBy(c => c.Order).FirstOrDefault();

        if (target != null)
        {
            await ChannelTracker.SaveLastChannelAsync(server.Id, target.Id);
            Navigation.NavigateTo($"/chat/{server.Id}/{target.Id}");
        }

        StateHasChanged();
    }

    private async Task NavigateToChannel(string serverId, string channelId)
    {
        await ChannelTracker.SaveLastChannelAsync(serverId, channelId);
        Navigation.NavigateTo($"/chat/{serverId}/{channelId}");
    }

    public void Dispose()
    {
        LoadingService.OnAppReadyStateChanged -= StateHasChanged;
        ChatNavService.OnChatServersChanged -= StateHasChanged;
    }
}