@using iChat.Client.Modals.User
@using iChat.Client.Services.UserServices
@using iChat.Client.Services.UserServices.ChatService
@using iChat.DTOs.Users.Messages
@inject ChatNavigationService ChatNavService
@inject UserStateService LoadingService
@implements IDisposable

<div class="discord-nav">
    <!-- Server List (Left Sidebar) -->
    <div class="server-sidebar">
        <!-- Home Button -->
        <div class="server-icon home-icon">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <i class="fas fa-home"></i>
            </NavLink>
        </div>

        <!-- Server List -->
        <div class="server-list">
            @foreach (var server in ChatNavService.ChatServers)
            {
                <NavLink class="server-icon" href=@($"chat/{server.Id}")>
                    <img src="@server.AvatarUrl" alt="@server.Name" />
                </NavLink>
            }
        </div>

        <!-- Add Server Button -->
        <div class="server-icon add-server" @onclick="() => showCreateServer = true">
            <i class="fas fa-plus"></i>
        </div>
    </div>

    <!-- Channel List (Right Sidebar) -->
    <div class="channel-sidebar @NavMenuCssClass">
        <div class="sidebar-header">
            <h3>iChat</h3>
            <button class="sidebar-toggle" @onclick="ToggleNavMenu">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="channel-category">
            <div class="category-header">
                <span>YOUR SERVERS</span>
            </div>

            <div class="channel-list">
                @foreach (var server in ChatNavService.ChatServers)
                {
                    <NavLink class="channel-item" href=@($"chat/{server.Id}")>
                        <span class="channel-prefix">#</span>
                        <span class="channel-name">@server.Name</span>
                    </NavLink>
                }
            </div>
        </div>
    </div>
</div>

<CreateServerModal IsVisible="@showCreateServer" IsVisibleChanged="@((val) => showCreateServer = val)" />

<style>
    /* Base Styles */
    .discord-nav {
        display: flex;
        height: 100vh;
        background-color: #202225;
        color: #dcddde;
    }

    /* Server Sidebar */
    .server-sidebar {
        width: 72px;
        background-color: #202225;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 12px 0;
        overflow-y: auto;
    }

    .server-icon {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #36393f;
        color: #dcddde;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .server-icon:hover {
            border-radius: 16px;
            background-color: #5865f2;
        }

        .server-icon img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }

    .home-icon {
        background-color: #5865f2;
    }

    .add-server {
        background-color: #36393f;
        color: #3ba55c;
    }

        .add-server:hover {
            background-color: #3ba55c;
            color: white;
        }

    /* Channel Sidebar */
    .channel-sidebar {
        width: 240px;
        background-color: #2f3136;
        display: flex;
        flex-direction: column;
        transition: transform 0.3s ease;
    }

        .channel-sidebar.collapse {
            transform: translateX(-100%);
            position: absolute;
            left: 72px;
            height: 100%;
            z-index: 100;
        }

    .sidebar-header {
        padding: 16px;
        border-bottom: 1px solid #292b2f;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .sidebar-header h3 {
            margin: 0;
            font-size: 16px;
            font-weight: bold;
        }

    .sidebar-toggle {
        background: none;
        border: none;
        color: #b9bbbe;
        cursor: pointer;
    }

    /* Channel Category */
    .channel-category {
        padding: 16px 8px;
    }

    .category-header {
        padding: 0 8px 8px;
        color: #96989d;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }

    /* Channel List */
    .channel-list {
        display: flex;
        flex-direction: column;
    }

    .channel-item {
        padding: 8px;
        margin: 2px 0;
        border-radius: 4px;
        color: #96989d;
        text-decoration: none;
        display: flex;
        align-items: center;
    }

        .channel-item:hover {
            background-color: #3a3d44;
            color: #dcddde;
        }

        .channel-item.active {
            background-color: #40444b;
            color: white;
        }

    .channel-prefix {
        margin-right: 8px;
        font-weight: bold;
    }

    .channel-name {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool showCreateServer = false;

    protected override void OnInitialized()
    {
        LoadingService.OnAppReadyStateChanged += StateHasChanged;
        ChatNavService.OnChatServersChanged += StateHasChanged;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        LoadingService.OnAppReadyStateChanged -= StateHasChanged;
        ChatNavService.OnChatServersChanged -= StateHasChanged;
    }
}