@using iChat.Client.Modals.User
@using iChat.Client.Services.UserServices
@using iChat.Client.Services.UserServices.ChatService
@using iChat.DTOs.Users.Messages
@inject ChatNavigationService ChatNavService
@inject UserStateService LoadingService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">iChat.Client</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="server-list">
            <hr class="nav-divider" />
            <h6 class="nav-heading px-3">YOUR SERVERS</h6>
            @foreach (var server in ChatNavService.ChatServers)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href=@($"chat/{server.Id}")>
                        <img src="@server.AvatarUrl" class="server-avatar" alt="@server.Name" /> @server.Name
                    </NavLink>
                </div>
            }

            <div class="nav-item px-3 mt-3">
                <button class="btn btn-sm btn-success w-100" @onclick="() => showCreateServer = true">
                    + Create New Server
                </button>
            </div>
        </div>
    </nav>
</div>

<CreateServerModal IsVisible="@showCreateServer" IsVisibleChanged="@((val) => showCreateServer = val)" />

<style>
    .nav-divider {
        border-top: 1px solid rgba(255,255,255,0.1);
        margin: 10px 15px;
    }

    .nav-heading {
        color: #999;
        font-size: 0.8rem;
        margin-bottom: 10px;
    }

    .server-avatar {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        margin-right: 8px;
    }

    .loading-indicator {
        color: #777;
        font-size: 0.8rem;
        padding: 8px 0;
        opacity: 0.7;
    }
</style>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool showCreateServer = false;

    protected override void OnInitialized()
    {
        LoadingService.OnAppReadyStateChanged += StateHasChanged;
        ChatNavService.OnChatServersChanged += StateHasChanged;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        LoadingService.OnAppReadyStateChanged -= StateHasChanged;
        ChatNavService.OnChatServersChanged -= StateHasChanged;
    }
}
