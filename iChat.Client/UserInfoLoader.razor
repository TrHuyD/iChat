
@using iChat.Client.Services.Auth
@using iChat.Client.Services.UserServices
@using iChat.Client.Services.UserServices.Chat
@inject LoginStateService LoginState
@inject UserStateService UserState
@inject NavigationManager _navigation
@inject ChatClientService ChatClientService
@if (!isReady)
{
    <div class="user-info-loading">
        <p>Loading user info...</p>
    </div>
}
else
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private static bool isReady = false;
    private int[] retryDelays = [1000, 3000, 5000];
    private int cooldownSeconds;
    private const string AuthKey = "authState";
    private int attemptCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }
    private async Task Load()
    {
        if (isReady)
        {
            return;
        }

        if (await LoginState.CheckedIfNotLogin())
        {
            _navigation.NavigateTo("/login");
            return;
        }
        
        isReady = await TryLoadUserDataWithRetries();    
        if(isReady)
        await ChatClientService.ConnectAsync();
    }
    private async Task<bool> TryLoadUserDataWithRetries()
    {

        int[] retryDelays = [1000, 1000,1000,1000,1000,1000,1000,1000,1000];
        for (int i = 0; i < retryDelays.Length; i++)
        {
            attemptCount = i + 1;
            try
            {
                var package = await UserState.LoadAllDataAsync();
                return true;
            }
            catch (HttpRequestException e)
            {
                if (e.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    return false;
                cooldownSeconds = retryDelays[i] / 1000;
                for (int s = cooldownSeconds; s > 0; s--)
                {
                    cooldownSeconds = s;
                    StateHasChanged();
                    await Task.Delay(1000);
                }
            }
        }

        return false;
    }

    public static void TriggerReload()
    {
        isReady = false;
        
    }
}
