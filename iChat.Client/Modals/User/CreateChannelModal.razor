@using iChat.Client.Services.UserServices
@using iChat.Client.Services.UserServices.ChatService
@inject ChatNavigationService ChatNavService

@if (IsVisible)
{
    <div class="discord-modal-backdrop"></div>

    <div class="discord-modal-container">
        <div class="discord-modal-dialog">
            <div class="discord-modal-header">
                <h5 class="modal-title">Create New Channel</h5>
                <button class="modal-close" @onclick="Close">✕</button>
            </div>
            <div class="discord-modal-body">
                <input @bind-value="ChannelName" @bind-value:event="oninput"
                       class="discord-input" placeholder="Channel name" />
            </div>
            <div class="discord-modal-footer">
                <button class="discord-button cancel" @onclick="Close">Cancel</button>
                <button class="discord-button primary" @onclick="Create"
                        disabled="@string.IsNullOrWhiteSpace(ChannelName)">
                    Create
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] public string ServerId { get; set; } = string.Empty;

    private string? ChannelName;

    private void Close()
    {
        ChannelName = null;
        IsVisibleChanged.InvokeAsync(false);
    }

    private async Task Create()
    {
        if (!string.IsNullOrWhiteSpace(ChannelName))
        {
            await ChatNavService.CreateChannelAsync(ChannelName, ServerId);
            Close();
        }
    }
}
