@using Microsoft.AspNetCore.Components.Forms
@using iChat.Client.DTOs.Chat
@using iChat.Client.Services.Auth
@inject ToastService ToastService
@inject UserStateService userState
@inject JwtAuthHandler _http
<div class="discord-modal-backdrop" @onclick="CloseModal"></div>

<div class="discord-modal-container" @onclick:stopPropagation>
    <div class="discord-modal-dialog">
        <div class="discord-modal-header">
            <h3>Update Your Profile</h3>
            <button class="close-button" @onclick="CloseModal" type="button">×</button>

        </div>

        <div class="discord-modal-body">
            <!-- Left: User Preview -->
            <div class="preview-section">
                <div class="user-preview-card">
                    <div class="avatar-container">
                        <img class="avatar" src="@GetPreviewAvatarUrl()" alt="Avatar preview" />
                        <div class="status-indicator"></div>
                    </div>
                    <div class="user-info">
                        <div class="username">@PreviewNickname</div>
                        <div class="status-text">Online</div>
                    </div>
                </div>
            </div>

            <!-- Right: Form Inputs -->
            <div class="form-section">
                <div class="input-group">
                    <label class="input-label" for="nickname">Nickname</label>
                    <input id="nickname"
                           class="discord-input @(string.IsNullOrEmpty(ValidationError) ? "" : "error")"
                           @bind="PreviewNickname"
                           @bind:event="oninput"
                           placeholder="Enter new nickname"
                           maxlength="32" />
                    @if (!string.IsNullOrEmpty(ValidationError))
                    {
                        <div class="error-message">@ValidationError</div>
                    }
                </div>

                <div class="input-group">
                    <label class="input-label" for="avatar">Avatar</label>
                    <div class="file-input-wrapper">
                        <InputFile OnChange="HandleAvatarChange"
                                   class="file-input"
                                   id="avatar"
                                   accept="image/png,image/jpeg,image/gif,image/webp" />

                    </div>
                    <div class="file-hint">PNG, JPG, GIF, or WebP. Max 2MB.</div>
                </div>
            </div>
        </div>

        <div class="discord-modal-footer">
            <button class="discord-button secondary" @onclick="CloseModal" disabled="@IsSaving">Cancel</button>
            <button class="discord-button primary" @onclick="Save" disabled="@(!CanSave || IsSaving)">
                @if (IsSaving)
                {
                    <div class="button-loading">
                        <div class="spinner"></div>
                        <span>Saving...</span>
                    </div>
                }
                else
                {
                    <span>Save Changes</span>
                }
            </button>
        </div>
    </div>
</div>

<style>
  
</style>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<(string?, IBrowserFile?)> OnSave { get; set; }

    private const long MaxFileSize = 2 * 1024 * 1024; // 2MB

    private string? _nicknameTemp;
    private string? OriginalNickname;
    private string? AvatarUrl;
    private IBrowserFile? SelectedAvatarFile;
    private string? AvatarPreviewUrl;
    private bool IsSaving = false;
    private string? ValidationError;

    private string? PreviewNickname
    {
        get => _nicknameTemp;
        set
        {
            _nicknameTemp = value;
            ValidateNickname();
        }
    }

    private bool CanSave =>
        string.IsNullOrWhiteSpace(ValidationError)
        && !string.IsNullOrWhiteSpace(PreviewNickname)
        && (PreviewNickname != OriginalNickname || SelectedAvatarFile != null);

    // 🔄 Load profile on modal open
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var profile = userState.GetUserProfile();

            if (profile is not null)
            {
                OriginalNickname = profile.DisplayName;
                AvatarUrl = profile.AvatarUrl ?? "/images/default-avatar.png";
                PreviewNickname = OriginalNickname;
            }
            else
            {
                ToastService.ShowError("Failed to load user profile.");
                OriginalNickname = "";
                AvatarUrl = "/images/default-avatar.png";
                PreviewNickname = "";
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error loading profile: " + ex.Message);
            OriginalNickname = "";
            AvatarUrl = "/images/default-avatar.png";
            PreviewNickname = "";
        }
    }

    private void ValidateNickname()
    {
        if (string.IsNullOrWhiteSpace(PreviewNickname))
        {
            ValidationError = "Nickname cannot be empty.";
        }
        else if (PreviewNickname.Length > 32)
        {
            ValidationError = "Nickname must be 32 characters or less.";
        }
        else if (!System.Text.RegularExpressions.Regex.IsMatch(PreviewNickname, @"^[a-zA-Z0-9_]+$"))
        {
            ValidationError = "Only letters, numbers, and underscores are allowed.";
        }
        else
        {
            ValidationError = null;
        }
    }

    private async Task HandleAvatarChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file.Size > MaxFileSize)
        {
            ToastService.ShowError("Avatar must be less than 2MB.");
            AvatarPreviewUrl = null;
            SelectedAvatarFile = null;
            return;
        }

        var allowedTypes = new[] { "image/png", "image/jpeg", "image/gif", "image/webp" };
        if (!allowedTypes.Contains(file.ContentType))
        {
            ToastService.ShowError("Please select a valid image file (PNG, JPG, GIF, or WebP).");
            return;
        }

        try
        {
            using var stream = file.OpenReadStream(MaxFileSize);
            var buffer = new byte[file.Size];
            await stream.ReadAsync(buffer);
            AvatarPreviewUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            SelectedAvatarFile = file;
            StateHasChanged();
        }
        catch (IOException ex)
        {
            ToastService.ShowError("Failed to read file: " + ex.Message);
        }
    }

    private string GetPreviewAvatarUrl()
    {
        return AvatarPreviewUrl ?? AvatarUrl ?? "/images/default-avatar.png";
    }

    private async Task Save()
    {
        if (!CanSave)
        {
            ToastService.ShowError("Please make changes before saving.");
            return;
        }

        IsSaving = true;

        try
        {
            HttpResponseMessage response;

            if (SelectedAvatarFile is null)
            {
                // No file, send JSON payload
                var nicknamePayload = new { UserName = PreviewNickname };
                response = await _http.SendAuthAsync(nicknamePayload, HttpMethod.Post, "/api/users/Update/NickName");
            }
            else
            {
                // File is present, send multipart form data
                using var formData = new MultipartFormDataContent();
                formData.Add(new StringContent(PreviewNickname ?? ""), "newName");
                var stream = SelectedAvatarFile.OpenReadStream(MaxFileSize);
                var content = new StreamContent(stream);
                content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(SelectedAvatarFile.ContentType);
                formData.Add(content, "file", SelectedAvatarFile.Name);

                var request = new HttpRequestMessage(HttpMethod.Post, "/api/users/Update/Profile")
                {
                    Content = formData
                };

                response = await _http.SendAuthAsync(request);
            }
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Profile updated successfully!");
                await CloseModal();
            }
            else
            {
                ToastService.ShowError($"Failed to update profile. Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to save profile: " + ex.Message);
        }
        finally
        {
            IsSaving = false;
        }
    }


    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }
}
