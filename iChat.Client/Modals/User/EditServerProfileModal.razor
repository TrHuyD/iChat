@using Microsoft.AspNetCore.Components.Forms
@using iChat.Client.Services.Auth
@inject ToastService ToastService
@inject JwtAuthHandler _http

<div class="discord-modal-backdrop" @onclick="CloseModal"></div>
<div class="discord-modal-container" @onclick:stopPropagation>
    <div class="discord-modal-dialog">
        <div class="discord-modal-header">
            <h3>Edit Server Profile</h3>
            <button class="close-button" @onclick="CloseModal" type="button">×</button>

        </div>

        <div class="discord-modal-body">
            <!-- Preview -->
            <div class="preview-section">
                <div class="user-preview-card">
                    <div class="avatar-container">
                        <img class="avatar" src="@GetPreviewAvatarUrl()" alt="Server Avatar" />
                    </div>
                    <div class="user-info">
                        <div class="username">@PreviewName</div>
                        <div class="status-text">Server</div>
                    </div>
                </div>
            </div>

            <!-- Inputs -->
            <div class="form-section">
                <div class="input-group">
                    <label class="input-label" for="serverName">Server Name</label>
                    <input id="serverName"
                           class="discord-input @(string.IsNullOrEmpty(ValidationError) ? "" : "error")"
                           @bind="PreviewName"
                           @bind:event="oninput"
                           maxlength="64"
                           placeholder="Enter server name" />
                    @if (!string.IsNullOrEmpty(ValidationError))
                    {
                        <div class="error-message">@ValidationError</div>
                    }
                </div>

                <div class="input-group">
                    <label class="input-label" for="serverAvatar">Server Avatar</label>
                    <InputFile id="serverAvatar"
                               OnChange="HandleAvatarChange"
                               accept="image/png,image/jpeg,image/webp"
                               class="file-input" />
                    <div class="file-hint">PNG, JPG, WebP. Max 2MB.</div>
                </div>
            </div>
        </div>

        <div class="discord-modal-footer">
            <button class="discord-button secondary" @onclick="CloseModal" disabled="@IsSaving">Cancel</button>
            <button class="discord-button primary" @onclick="Save" disabled="@(!CanSave || IsSaving)">
                @if (IsSaving)
                {
                    <div class="button-loading"><div class="spinner"></div><span>Saving...</span></div>
                }
                else
                {
                    <span>Save Changes</span>
                }
            </button>
        </div>
    </div>
</div>
@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<(string?, IBrowserFile?)> OnSave { get; set; }

    [Parameter] public string? OriginalName { get; set; }
    [Parameter] public string? OriginalAvatarUrl { get; set; }
    [Parameter] public string ServerId { get; set; } = default!;

    private string? PreviewName;
    private string? AvatarPreviewUrl;
    private IBrowserFile? SelectedAvatarFile;
    private string? ValidationError;
    private bool IsSaving = false;
    private const long MaxFileSize = 2 * 1024 * 1024;

    protected override void OnInitialized()
    {
        PreviewName = OriginalName;
        AvatarPreviewUrl = OriginalAvatarUrl ;
    }

    private bool CanSave =>
        !string.IsNullOrWhiteSpace(PreviewName) &&
        string.IsNullOrEmpty(ValidationError) &&
        (PreviewName != OriginalName || SelectedAvatarFile != null);

    private void Validate()
    {
        if (string.IsNullOrWhiteSpace(PreviewName))
            ValidationError = "Server name is required.";
        else if (PreviewName.Length > 64)
            ValidationError = "Server name must be under 64 characters.";
        else
            ValidationError = null;
    }

    private async Task HandleAvatarChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file.Size > MaxFileSize)
        {
            ToastService.ShowError("Avatar must be under 2MB.");
            return;
        }

        using var stream = file.OpenReadStream(MaxFileSize);
        var buffer = new byte[file.Size];
        await stream.ReadAsync(buffer);
        AvatarPreviewUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        SelectedAvatarFile = file;
    }

    private string GetPreviewAvatarUrl() => AvatarPreviewUrl;

    private async Task Save()
    {
        Validate();
        if (!CanSave)
        {
            ToastService.ShowError("Please make valid changes.");
            return;
        }

        IsSaving = true;

        try
        {
            HttpResponseMessage response;

            if (SelectedAvatarFile is null)
            {
                response = await _http.SendAuthAsync(new { NewName = PreviewName }, HttpMethod.Post, $"/api/servers/{ServerId}/rename");
            }
            else
            {
                var form = new MultipartFormDataContent();
                form.Add(new StringContent(PreviewName ?? ""), "newName");
                var stream = SelectedAvatarFile.OpenReadStream(MaxFileSize);
                form.Add(new StreamContent(stream), "file", SelectedAvatarFile.Name);

                response = await _http.SendAuthAsync(new HttpRequestMessage(HttpMethod.Post, $"/api/servers/{ServerId}/update")
                {
                    Content = form
                });
            }

            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Server updated successfully.");
                await OnSave.InvokeAsync((PreviewName, SelectedAvatarFile));
                await CloseModal();
            }
            else
            {
                ToastService.ShowError("Failed to update server.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error: " + ex.Message);
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }
}
