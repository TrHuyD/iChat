@* ServerSettingsModal.razor *@
@if (IsVisible)
{
    <div class="modal-backdrop">
        <div class="modal-container">
            <div class="settings-container">
                <!-- Sidebar -->
                <div class="settings-sidebar">
                    <ul>
                        <li @onclick="() => SelectPage(SettingsPage.Overview)" class="@GetClass(SettingsPage.Overview)">Overview</li>
                        <li @onclick="() => SelectPage(SettingsPage.Roles)" class="@GetClass(SettingsPage.Roles)">Roles</li>
                        <li @onclick="() => SelectPage(SettingsPage.Members)" class="@GetClass(SettingsPage.Members)">Members</li>
                        <li @onclick="() => SelectPage(SettingsPage.Integrations)" class="@GetClass(SettingsPage.Integrations)">Integrations</li>
                        <li @onclick="() => SelectPage(SettingsPage.Emoji)" class="@GetClass(SettingsPage.Emoji)">Emoji</li>
                    </ul>
                </div>

                <!-- Content -->
                <div class="settings-content">
                    @switch (SelectedPage)
                    {
                        case SettingsPage.Overview:
                            <EditServerProfileModal server="@server"/>
                            break;

                        case SettingsPage.Roles:
                            <h2>Manage Roles</h2>
                            <p>Create, edit, and delete roles for your server.</p>
                            break;

                        case SettingsPage.Members:
                            <h2>Manage Members</h2>
                            <p>Invite or remove members, assign roles.</p>
                            break;

                        case SettingsPage.Integrations:
                            <h2>Integrations</h2>
                            <p>Connect bots, webhooks, and external services.</p>
                            break;

                        case SettingsPage.Emoji:
                            <EmojiSettings server="@server" />

                            break;

                        default:
                            <p>Select a page from the sidebar.</p>
                            break;
                    }
                </div>
            </div>

            <!-- Close button -->
            <button class="btn btn-secondary close-btn" @onclick="Close">Close</button>
        </div>
    </div>
}

<!-- Delete Modal -->
@if (ShowDeleteModal)
{
    <div class="modal-backdrop inner">
        <div class="modal">
            <h3>Delete Server</h3>
            <p>Are you sure you want to delete this server? This action cannot be undone.</p>
            <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
            <button class="btn btn-secondary" @onclick="() => ShowDeleteModal = false">Cancel</button>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] public ChatServerDtoUser server { get; set; }

    private SettingsPage SelectedPage { get; set; } = SettingsPage.Overview;
    private bool ShowDeleteModal { get; set; } = false;

    private void SelectPage(SettingsPage page) => SelectedPage = page;
    private string GetClass(SettingsPage page) => page == SelectedPage ? "active" : "";

    private async Task Close() =>
        await IsVisibleChanged.InvokeAsync(false);

    private async Task ConfirmDelete()
    {
        ShowDeleteModal = false;
        await IsVisibleChanged.InvokeAsync(false);
    }

    private enum SettingsPage
    {
        Overview,
        Roles,
        Members,
        Integrations,
        Emoji
    }
}
