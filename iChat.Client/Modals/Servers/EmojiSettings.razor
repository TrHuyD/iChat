@using Microsoft.AspNetCore.Components.Forms
@using iChat.Client.DTOs.Chat
@using iChat.Client.Services.Auth
@using iChat.DTOs.Users.Servers
@using iChat.DTOs.Collections
@inject JwtAuthHandler _https
@inject ToastService ToastService
@inject IJSRuntime JS

<div class="emoji-settings">
    <h2 class="section-title">Emoji</h2>
    <p class="section-sub">Add up to 100 custom emoji that anyone can use in this server.</p>

    <div class="upload-box">
        <InputFile OnChange="UploadEmoji"
                   @ref="fileInput"
                   style="display:none"
                   accept="image/png,image/jpeg,image/gif,image/webp" />

        <button class="upload-btn" @onclick="TriggerFileInput">
            Upload Emoji
        </button>

        <ul class="upload-requirements">
            <li>File type: JPEG, PNG, GIF, WEBP</li>
            <li>Max file size: 2 MB</li>
            <li>Recommended dimensions: 128x128</li>
            <li>Naming: at least 2 characters, alphanumeric & underscores</li>
        </ul>
    </div>

    @if (IsLoading)
    {
        <p>Loading emojis...</p>
    }
    else if (Emojis is not null && Emojis.Count > 0)
    {
<div class="emoji-table">
    <div class="emoji-table-header">
        <span>Image</span>
        <span>Name</span>
        <span>Uploaded By</span>
    </div>

    @foreach (var emoji in Emojis)
    {
        <div class="emoji-row">
            <img src="@emoji.url" alt="@emoji.Name" class="emoji-img" />

            @if (EditingEmojiId == emoji.Id)
            {
                <input type="text"
                       class="emoji-edit-input"
                       style="width: @(Math.Max(EditingName?.Length ?? 0, 2))ch;"
                       value="@EditingName"
                       @oninput="@(e => { EditingName = e.Value?.ToString() ?? ""; StateHasChanged(); })"
                       @onblur="() => SaveEmojiName(emoji)"
                       @onkeydown="@(async e =>
                       {
                           if (e.Key == "Enter")
                               await SaveEmojiName(emoji);
                       })"
                       autofocus />
            }
            else
            {
                <span class="emoji-name"
                      @onclick="() => StartEditing(emoji)">
                    :@emoji.Name:
                </span>
            }

            <span class="emoji-uploader">placeholder</span>
        </div>
    }
</div>

    }
    else
    {
        <p>No emojis uploaded yet.</p>
    }
</div>

@code {
    [Parameter] public ChatServerDtoUser server { get; set; }

    private List<EmojiFEDto> Emojis { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private InputFile fileInput;
    private const long MaxFileSize = 2 * 1024 * 1024; 
    private async Task TriggerFileInput()
    {
        await JS.InvokeVoidAsync("triggerInputFileClick", fileInput.Element);
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadEmojis();
    }

    private async Task LoadEmojis()
    {
        IsLoading = true;
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/api/chat/{server.Id}/emojis");
            var result = await _https.SendAuthAsync(request);

            if (result.IsSuccessStatusCode)
                Emojis = (await result.Content.ReadFromJsonAsync<List<EmojiBaseDto>>())
                    .Select(t => new EmojiFEDto(t.Id, t.Name))
                    .ToList();
            else
                Console.WriteLine("Error when retrieving Emoji" + result.RequestMessage);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error when retrieving emoji " + ex.Message);
            Emojis = new();
        }
        IsLoading = false;
    }

    private async Task UploadEmoji(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file is null) return;

            if (file.Size > MaxFileSize)
            {
                ToastService.ShowError("Emoji file too large (2MB limit).");
                return;
            }

            using var readStream = file.OpenReadStream(MaxFileSize);
            using var ms = new MemoryStream();
            await readStream.CopyToAsync(ms);
            var fileBytes = ms.ToArray();

            var fileContent = new StreamContent(new MemoryStream(fileBytes));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            var form = new MultipartFormDataContent
            {
                { fileContent, "file", file.Name }
            };

            var request = new HttpRequestMessage(HttpMethod.Post, $"/api/chat/{server.Id}/emojis")
            {
                Content = form
            };

            var response = await _https.SendAuthAsync(request);

            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Emoji uploaded successfully.");
                await LoadEmojis();
            }
            else
            {
                ToastService.ShowError($"Emoji upload failed: {response}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error uploading emoji: {ex.Message}");
        }

    }

    private stringlong? EditingEmojiId { get; set; }
    private string EditingName { get; set; }

    private void StartEditing(EmojiFEDto emoji)
    {
        EditingEmojiId = emoji.Id;
        EditingName = emoji.Name;
    }

    private async Task SaveEmojiName(EmojiFEDto emoji)
    {
        if (EditingEmojiId != emoji.Id) return;

        EditingEmojiId = null; 

        if (string.IsNullOrWhiteSpace(EditingName) || EditingName == emoji.Name)
            return; 

        try
        {
            var payload = new { name = EditingName };
            var request = new HttpRequestMessage(
                HttpMethod.Put,
                $"/api/chat/{server.Id}/emojis/{emoji.Id}"
            )
            {
                Content = JsonContent.Create(payload)
            };

            var response = await _https.SendAuthAsync(request);
            if (response.IsSuccessStatusCode)
            {
                emoji.Name = EditingName;
                ToastService.ShowSuccess("Emoji renamed.");
            }
            else
            {
                ToastService.ShowError($"Rename failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error renaming emoji: {ex.Message}");
        }

    }


}
