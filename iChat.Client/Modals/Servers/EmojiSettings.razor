@using Microsoft.AspNetCore.Components.Forms
@using iChat.Client.DTOs.Chat
@using iChat.Client.Services.Auth
@using iChat.DTOs.Users.Servers
@using iChat.DTOs.Collections
@inject JwtAuthHandler _https
@inject ToastService ToastService
@inject IJSRuntime JS
<div class="emoji-settings">
    <div class="emoji-header">
        <h3>Server Emojis</h3>
        <label class="upload-icon icon-button" title="Upload Image" @onclick="TriggerFileInput">
            <i class="fas fa-image"></i>
        </label>
        <InputFile OnChange="UploadEmoji"
                   @ref="fileInput"
                   style="display:none"
                   accept="image/png,image/jpeg,image/gif,image/webp" />
    </div>

    @if (IsLoading)
    {
        <p>Loading emojis...</p>
    }
    else if (Emojis is not null && Emojis.Count > 0)
    {
        <div class="emoji-grid">
            @foreach (var emoji in Emojis)
            {
                <div class="emoji-item">
                    <img src="@emoji.url" alt="@emoji.Name" />
                    <span>@emoji.Name</span>
                </div>
            }
        </div>
    }
    else
    {
        <p>No emojis uploaded yet.</p>
    }
</div>

@code {
    [Parameter] public ChatServerDtoUser server { get; set; }

    private List<EmojiFEDto> Emojis { get; set; } = new();
    private bool IsLoading { get; set; } = true;

    private InputFile fileInput;
    private const long MaxFileSize = 2 * 1024 * 1024; // 2 MB
    private async Task TriggerFileInput()
    {
        await JS.InvokeVoidAsync("triggerInputFileClick", fileInput.Element);
    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadEmojis();
    }

    private async Task LoadEmojis()
    {
        IsLoading = true;
        try
        {

            var request = new HttpRequestMessage(HttpMethod.Get, $"/api/chat/{server.Id}/emojis")
            {

            };
            var result = await _https.SendAuthAsync(request);
            if (result.IsSuccessStatusCode)
                Emojis = (await result.Content.ReadFromJsonAsync<List<EmojiBaseDto>>()).Select(t=>new EmojiFEDto(t.Id,t.Name)).ToList();
            else
                Console.WriteLine("Error when retrieving Emoji" + result.RequestMessage);
        }
        catch(Exception ex)
        {
            Console.WriteLine("Error when retrieving  emoji " + ex.Message);
            Emojis = new();
        }
        IsLoading = false;
    }

    private async Task UploadEmoji(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file is null) return;

            if (file.Size > MaxFileSize)
            {
                ToastService.ShowError("Emoji file too large (2MB limit).");
                return;
            }

            // Copy to memory first (so stream isn’t disposed early)
            using var readStream = file.OpenReadStream(MaxFileSize);
            using var ms = new MemoryStream();
            await readStream.CopyToAsync(ms);
            var fileBytes = ms.ToArray();

            var fileContent = new StreamContent(new MemoryStream(fileBytes));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            var form = new MultipartFormDataContent
            {
                { fileContent, "file", file.Name }
            };
            var request = new HttpRequestMessage(HttpMethod.Post, $"/api/chat/{server.Id}/emojis")
            {
                Content=form
            };
            var response = await _https.SendAuthAsync(request);

            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("✅ Emoji uploaded successfully.");
                await LoadEmojis();
            }
            else
            {
                ToastService.ShowError($"❌ Emoji upload failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"❌ Error uploading emoji: {ex.Message}");
        }
    }
}
