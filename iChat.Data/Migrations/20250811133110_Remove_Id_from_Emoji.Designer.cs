// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using iChat.Data.EF;

#nullable disable

namespace iChat.Data.Migrations
{
    [DbContext(typeof(iChatDbContext))]
    [Migration("20250811133110_Remove_Id_from_Emoji")]
    partial class Remove_Id_from_Emoji
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("iChat.Data.Entities.Logs.MessageAuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("ActionType")
                        .HasColumnType("smallint");

                    b.Property<long>("ActorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("PreviousContent")
                        .IsRequired()
                        .HasMaxLength(40000)
                        .HasColumnType("character varying(40000)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("MessageId");

                    b.HasIndex("ActorUserId", "Timestamp");

                    b.HasIndex("ChannelId", "ActionType");

                    b.ToTable("MessageAuditLogs");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastAssignedBucketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("ChatChannels");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatRoles.ChannelPermissionOverride", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Allow")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("Deny")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatChannelId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ChannelId", "RoleId")
                        .IsUnique();

                    b.ToTable("ChannelPermissionOverrides");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatRoles.ChatRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Permissions")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatServerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ChatRoles");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatRoles.UserChatRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserChatRoles");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<string>("Avatar")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("Name");

                    b.ToTable("ChatServers");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ServerBan", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatServerId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("BannedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("BannedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ChatServerId");

                    b.HasIndex("BannedById");

                    b.HasIndex("ChatServerId");

                    b.ToTable("ServerBans");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.UserChatChannel", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("LastSeenMessage")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationCount")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ChannelId");

                    b.ToTable("UserChatChannels");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.UserChatServer", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatServerId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.HasKey("UserId", "ChatServerId");

                    b.HasIndex("ChatServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChatServers");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.Bucket", b =>
                {
                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<int>("BucketId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ChannelId", "BucketId");

                    b.ToTable("Buckets");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.Emoji", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Emojis");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SizeBytes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UploaderUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.Message", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("BucketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2147483647);

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("LastEditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MediaId")
                        .HasColumnType("integer");

                    b.Property<short>("MessageType")
                        .HasColumnType("smallint");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("CASE WHEN NOT \"isDeleted\" THEN to_tsvector('english', coalesce(\"TextContent\", '')) ELSE NULL END", true);

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("TextContent")
                        .HasMaxLength(40000)
                        .HasColumnType("character varying(40000)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("SenderId");

                    b.HasIndex("ChannelId", "Timestamp")
                        .IsDescending(false, true);

                    b.HasIndex("ChannelId", "BucketId", "Id")
                        .IsDescending(false, true, true);

                    b.HasIndex("ChannelId", "SenderId", "Timestamp")
                        .IsDescending(false, false, true);

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.UserEmojiMessage", b =>
                {
                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmojiId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("MessageId", "EmojiId", "UserId");

                    b.HasIndex("EmojiId");

                    b.HasIndex("MessageId")
                        .IsDescending();

                    b.HasIndex("UserId");

                    b.ToTable("UserEmojiMessages");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iChat.Data.Entities.Logs.MessageAuditLog", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.AppUser", "ActorUser")
                        .WithMany()
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Servers.ChatChannel", "ChatChannel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Users.Messages.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("ChatChannel");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatChannel", b =>
                {
                    b.HasOne("iChat.Data.Entities.Servers.ChatServer", "Server")
                        .WithMany("ChatChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatRoles.ChannelPermissionOverride", b =>
                {
                    b.HasOne("iChat.Data.Entities.Servers.ChatChannel", "ChatChannel")
                        .WithMany("Overrides")
                        .HasForeignKey("ChatChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Servers.ChatRoles.ChatRole", "Role")
                        .WithMany("ChannelOverrides")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatChannel");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatRoles.ChatRole", b =>
                {
                    b.HasOne("iChat.Data.Entities.Servers.ChatServer", "ChatServer")
                        .WithMany("ChatRoles")
                        .HasForeignKey("ChatServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatServer");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatRoles.UserChatRole", b =>
                {
                    b.HasOne("iChat.Data.Entities.Servers.ChatRoles.ChatRole", "Role")
                        .WithMany("UserChatRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Users.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatServer", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.AppUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ServerBan", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.AppUser", "BannedBy")
                        .WithMany()
                        .HasForeignKey("BannedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Servers.ChatServer", "ChatServer")
                        .WithMany("Bans")
                        .HasForeignKey("ChatServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BannedBy");

                    b.Navigation("ChatServer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.UserChatServer", b =>
                {
                    b.HasOne("iChat.Data.Entities.Servers.ChatServer", "ChatServer")
                        .WithMany("UserChatServers")
                        .HasForeignKey("ChatServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Users.AppUser", "User")
                        .WithMany("UserChatServers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatServer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Auth.RefreshToken", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.AppUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.Bucket", b =>
                {
                    b.HasOne("iChat.Data.Entities.Servers.ChatChannel", "Channel")
                        .WithMany("Buckets")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.Emoji", b =>
                {
                    b.HasOne("iChat.Data.Entities.Servers.ChatServer", "ChatServer")
                        .WithMany("Emojis")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatServer");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.Message", b =>
                {
                    b.HasOne("iChat.Data.Entities.Servers.ChatChannel", "ChatChannel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Users.Messages.MediaFile", "MediaFile")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iChat.Data.Entities.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Users.Messages.Bucket", "Bucket")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId", "BucketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("ChatChannel");

                    b.Navigation("MediaFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.UserEmojiMessage", b =>
                {
                    b.HasOne("iChat.Data.Entities.Users.Messages.Emoji", "Emoji")
                        .WithMany()
                        .HasForeignKey("EmojiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Users.Messages.Message", "Message")
                        .WithMany("EmojiReactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iChat.Data.Entities.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emoji");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatChannel", b =>
                {
                    b.Navigation("Buckets");

                    b.Navigation("Overrides");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatRoles.ChatRole", b =>
                {
                    b.Navigation("ChannelOverrides");

                    b.Navigation("UserChatRoles");
                });

            modelBuilder.Entity("iChat.Data.Entities.Servers.ChatServer", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("ChatChannels");

                    b.Navigation("ChatRoles");

                    b.Navigation("Emojis");

                    b.Navigation("UserChatServers");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.AppUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserChatServers");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.Bucket", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("iChat.Data.Entities.Users.Messages.Message", b =>
                {
                    b.Navigation("EmojiReactions");
                });
#pragma warning restore 612, 618
        }
    }
}
